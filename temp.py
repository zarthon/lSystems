import sys
from math import *
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
width = 800
height = 800
colorR=1.0
colorB=0.0
colorG=0.0
matrix = []
FILENAME='lsystems.txt'
AXIOM=None
RULES={}
ANGLE=None
VARIABLES = None
SIZE=None
ITERATE=None
SHAPE=''

def Lindenmayer(axiom,rules):

    rules = rules.items()
    def apply_rule(axiom,(symbol,replacement)):    
        return axiom.replace(symbol,replacement.lower())

    while True:
        # Create a generator function
        yield axiom
        #get the next iteration of the system
        axiom = reduce(apply_rule,rules,axiom).upper()

class GenerateList(object):
    def __init__(self,generator):
        self.__generator = generator
        self.__list = []

    #to store the previous iterations
    def __getitem__(self,index):
        for i in range(index-len(self.__list) +1):
            self.__list.append(self.__generator.next())
        return self.__list[index]

class L_System(GenerateList):
    """
    Sample class to manipulate the L String generated by Lindenmayer function defined above.

    It is expected that the user follows the following convention to define the rules, Source
    http://en.wikipedia.org/wiki/L-system

    'F': Draw a Line
    '+': Turn Right by predefined angle i.e. objects angle
    '-': Turn Left by predefined angle
    'G': Move forward without drawing
    ']': Restore previously saved states
    '[': Save current state

    """
    def __init__(self,offset,start,rules,angle):
        self.offset = offset
        self.states = []
        self.angle = angle
        self.actions = {
            'F': self.forward,
            '+': self.right,
            '-': self.left,
            'G': self.go,
            '[': self.save,
            ']': self.restore,
        }
        super(L_System, self).__init__(Lindenmayer(start, rules))
    
##########################3
    def drawShape(self,which):
        if which == "line":
            glBegin(GL_LINES)
            glVertex2d(0,0)
            glVertex2d(self.offset,0)
            glEnd()
        elif which == "quad":
            glBegin(GL_POLYGON)
            glVertex2d(0,0)
            glVertex2d(self.offset,0)
            glVertex2d(self.offset,self.offset)
            glVertex2d(0,self.offset)
            glEnd()
        elif which=="circle":
            glBegin(GL_LINE_LOOP)
            for ang in range(0, 360, 2):
                x = cos(ang*pi/180)
                y = sin(ang*pi/180)
                glVertex2d(x, y)
            glEnd()
        glFlush()
    def forward(self):
        global SHAPE
        self.drawShape(SHAPE)
        glTranslated(self.offset,0,0)
    def right(self): 
        glRotated(self.angle,0,0,1)
    def left(self):
        glRotated(-self.angle,0,0,1)
    def go(self):
        glTranslated(self.offset,0,0)
    def save(self):
        global matrix
        temp = glGetFloatv(GL_MODELVIEW_MATRIX)
        matrix.append(temp)
    def restore(self):
        global matrix
        temp = matrix.pop()
        glLoadMatrixd(temp)
    def update(self):
        pass

    def draw(self, index):
        glColor3d(colorR,colorB,colorG)
        glLineWidth(1)
        glLoadIdentity()
        glPushMatrix()
        for char in self[index]:
            if char in self.actions:
                self.actions[char]()

            

def display():
    glClear( GL_COLOR_BUFFER_BIT )
    glColor3d(1.0,0.0,0.0)


def file_handle():
    try:
        global AXIOM,RULES,ANGLE,SIZE,ITERATE,SHAPE
        fin = open(FILENAME,"r")
        lineList = fin.readlines()
        fin.close()
        for line in lineList:
            temp = line.split(";")
            if temp[0] == "Va":
                VARIABLES = temp[1].rstrip()
            elif temp[0] == "Ax":
                AXIOM = temp[1].rstrip()
            elif temp[0] == "Ru":
                key, val = temp[1].rstrip().split(":")[0],temp[1].rstrip().split(":")[1]
                RULES[key] = val
            elif temp[0] == "An":
                ANGLE = int(temp[1].rstrip()) 
            elif temp[0] == "Si":
                SIZE = float(temp[1].rstrip())
            elif temp[0] == "It":
                ITERATE = int(temp[1].rstrip())
            elif temp[0] == "Sh":
                SHAPE = temp[1].rstrip()
        L_System( SIZE,AXIOM, RULES,ANGLE).draw(ITERATE)
    except IOError:
        print "File Not Found"
        sys_exit(1)

   

def createMenu():
    menu = glutCreateMenu(processMenuEvents)
    glutAddMenuEntry("Dragon",1)
    glutAddMenuEntry("Snowflake",2)
    glutAddMenuEntry("Sierpinsky",3)
    glutAddMenuEntry("Plant",4)
    submenu = glutCreateMenu(colorChange)
    glutAddMenuEntry("Red",4)
    glutAddMenuEntry("Orange",5)
    glutCreateMenu(processMenuEvents)
    glutAddSubMenu("color",submenu)
    glutAddSubMenu("System",menu)
    glutAddMenuEntry("File",5)
    glutAttachMenu (GLUT_RIGHT_BUTTON)
    glutPostRedisplay()

def colorChange(option):
    global colorR, colorB, colorG
    print type(option)
    if option == 4:
        colorR = 1.0
        colorB=0.0
        colorG=0.0
    elif option == 5:
        colorR=0.9
        colorB=0.6
        colorG=0.5

def processMenuEvents(option):
    if option == 1:
        L_System( 0.01,'FX',{'X':'X+FY','Y':'FX-Y'},90).draw(10)
    elif option == 2:
        L_System(0.01,'F++F++F',{'F':'F-F++F-F'},60).draw(3)
    elif option == 3:
        L_System(0.001,'FA', {'FA': 'FB-FA-FB', 'FB': 'FA+FB+FA'}, 60).draw(8)
    elif option==4:
        L_System(0.01,'FX', {'X': 'F-[[X]+X]+F[+FX]-X', 'F': 'FF'}, 25).draw(5)
    else:
        file_handle()
        

if __name__=='__main__':
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)
    glutInitWindowSize(width, height)
    glutInitWindowPosition(100, 100)
    glutCreateWindow("Simple OpenGL Examples")
    createMenu()
    glutDisplayFunc(display)
    glutMainLoop()


