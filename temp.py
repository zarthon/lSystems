import sys
from math import *
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
width = 800
height = 800
colorR=1.0
colorB=0.0
colorG=0.0
matrix = []
def Lindenmayer(axiom,rules):

    rules = rules.items()
    def apply_rule(axiom,(symbol,replacement)):    
        return axiom.replace(symbol,replacement.lower())

    while True:
        # Create a generator function
        yield axiom
        #get the next iteration of the system
        axiom = reduce(apply_rule,rules,axiom).upper()

class GenerateList(object):
    def __init__(self,generator):
        self.__generator = generator
        self.__list = []

    #to store the previous iterations
    def __getitem__(self,index):
        for i in range(index-len(self.__list) +1):
            self.__list.append(self.__generator.next())
        return self.__list[index]

class L_System(GenerateList):
    """
    Sample class to manipulate the L String generated by Lindenmayer function defined above.

    It is expected that the user follows the following convention to define the rules, Source
    http://en.wikipedia.org/wiki/L-system

    'F': Draw a Line
    '+': Turn Right by predefined angle i.e. objects angle
    '-': Turn Left by predefined angle
    'G': Move forward without drawing
    ']': Restore previously saved states
    '[': Save current state

    """
    def __init__(self,offset,start,rules,angle):
        self.offset = offset
        self.states = []
        self.angle = angle
        self.actions = {
            'F': self.forward,
            '+': self.right,
            '-': self.left,
            'G': self.go,
            '[': self.save,
            ']': self.restore,
        }
        super(L_System, self).__init__(Lindenmayer(start, rules))
    
##########################3
    def forward(self):
        glBegin(GL_LINES)
        glVertex2d(0,0)
        glVertex2d(self.offset,0)
        glEnd()
        glTranslated(self.offset,0,0)
    def right(self): 
        glRotated(self.angle,0,0,1)
    def left(self):
        glRotated(-self.angle,0,0,1)
######################################
    def go(self):
        glTranslated(self.offset,0,0)
    def save(self):
        global matrix
        temp = glGetFloatv(GL_MODELVIEW_MATRIX)
        matrix.append(temp)
    def restore(self):
        global matrix
        temp = matrix.pop()
        glLoadMatrixd(temp)
    def update(self):
        pass

    def draw(self, index):
        glColor3d(colorR,colorB,colorG)
        glLineWidth(1)
        glLoadIdentity()
        glPushMatrix()
        for char in self[index]:
            if char in self.actions:
                self.actions[char]()


def display():
    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT )
    glColor3d(1.0,0.0,0.0)

def createMenu():
    menu = glutCreateMenu(processMenuEvents)
    glutAddMenuEntry("Dragon",1)
    glutAddMenuEntry("Snowflake",2)
    glutAddMenuEntry("Sierpinsky",3)
    glutAddMenuEntry("Plant",4)
    submenu = glutCreateMenu(colorChange)
    glutAddMenuEntry("Red",4)
    glutAddMenuEntry("Orange",5)
    glutCreateMenu(processMenuEvents)
    glutAddSubMenu("color",submenu)
    glutAddSubMenu("System",menu)
    glutAttachMenu (GLUT_RIGHT_BUTTON)
    glutPostRedisplay()

def colorChange(option):
    global colorR, colorB, colorG
    if option == 4:
        colorR = 1.0
        colorB=0.0
        colorG=0.0
    elif option == 5:
        colorR=0.9
        colorB=0.6
        colorG=0.5

def processMenuEvents(option):
    if option == 1:
        L_System( 0.01,'FX', {'X': 'X+YF', 'Y': 'FX-Y'}, 90).draw(10)
    elif option == 2:
        L_System(0.01,'F++F++F',{'F':'F-F++F-F'},60).draw(6)
    elif option == 3:
        L_System(0.001,'FA', {'FA': 'FB-FA-FB', 'FB': 'FA+FB+FA'}, 60).draw(8)
    else:
        L_System(0.01,'FX', {'X': 'F-[[X]+X]+F[+FX]-X', 'F': 'FF'}, 25).draw(8)
        

if __name__=='__main__':
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB)
    glutInitWindowSize(width, height)
    glutInitWindowPosition(100, 100)
    glutCreateWindow("Simple OpenGL Examples")
    glutDisplayFunc(display)
    createMenu()
    glutMainLoop()


